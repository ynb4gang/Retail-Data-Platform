services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 10

  airflow-init:
    image: apache/airflow:2.6.3
    env_file: .env
    environment:
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-docker psycopg2-binary
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: >
      bash -c "
      until airflow db check; do
        echo 'Waiting for database to be ready...';
        sleep 5;
      done;
      airflow db init;
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com;
      echo 'Airflow initialization completed successfully'
      "
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    image: apache/airflow:2.6.3
    restart: unless-stopped
    env_file: .env
    environment:
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-docker psycopg2-binary
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: webserver
    depends_on:
      - postgres
      - airflow-init

  airflow-scheduler:
    image: apache/airflow:2.6.3
    restart: unless-stopped
    env_file: .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    depends_on:
      - postgres
      - airflow-init

  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    restart: unless-stopped
    environment:
      - SUPERSET_ENV=production
      - SUPERSET_CONFIG_PATH=/home/superset/superset_config.py
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PYTHONPATH=/usr/local/lib/python3.10/site-packages:/app/superset_home/.local/lib/python3.10/site-packages:/app/pythonpath
    volumes:
      - ./superset_home:/home/superset
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        echo 'PYTHONPATH set to: $PYTHONPATH' &&
        superset db upgrade &&
        superset init &&
        /usr/bin/run-server.sh
      "

  metabase:
    image: metabase/metabase:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - postgres

  prefect:
    image: prefecthq/prefect:2-latest
    restart: unless-stopped
    env_file: .env
    environment:
      - PREFECT_SERVER_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PREFECT_UI_ENABLED=true
      - PREFECT_UI_PORT=4200
    volumes:
      - prefect_data:/var/lib/prefect
    ports:
      - "4200:4200"
    command: ["prefect", "server", "start", "--host", "0.0.0.0"]
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  scraper:
    build: ./scraper
    restart: "no"
    volumes:
      - ./scraper:/usr/src/app
    depends_on:
      - postgres

volumes:
  postgres_data:
  superset_home:
  prefect_data: